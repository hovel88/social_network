volumes:
  prometheus-data:
  grafana-storage:

networks:
  net:
    driver: bridge

services:
  social_srv:
    image: ${ENV_SOCIAL_SERVICE_IMAGE}
    build:
      context: ./service/
      dockerfile: Dockerfile
    container_name: "social_srv"
    hostname: "social_srv"
    # restart: on-failure
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      - PGSQL_ENDPOINT=postgresql://postgres_db:5432/postgres
      - PGSQL_LOGIN=postgres
      - PGSQL_PASSWORD=${ENV_POSTGRES_PASSWORD}
      - HTTP_LISTENING=0.0.0.0:6000
      - HTTP_QUEUE_CAPACITY=${ENV_HTTP_QUEUE_CAPACITY}
      - HTTP_THREADS_COUNT=${ENV_HTTP_THREADS_COUNT}
      - PROMETHEUS_PORT=6001
    networks:
      - net
    ports:
      - ${ENV_HTTP_EXTERNAL_PORT}:6000
      - ${ENV_PROMETHEUS_EXTERNAL_PORT}:6001   # для метрик Prometheus
    # command: "-I names_search -i names_search"


  postgres_db:
    image: ${ENV_POSTGRES_DB_IMAGE}
    container_name: "postgres_db"
    hostname: "postgres_db"
    # restart: on-failure
    environment:
      - POSTGRES_PASSWORD=${ENV_POSTGRES_PASSWORD}
    volumes:
      - ./postgres_db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - net
    ports:
      - ${ENV_POSTGRES_EXTERNAL_PORT}:5432


  prometheus_srv:
    image: prom/prometheus:v2.37.9
    container_name: "prometheus_srv"
    hostname: "prometheus_srv"
    # restart: always
    networks:
      - net
    ports:
      - 9090:9090
      # - 9091:9091 # Pushgateway
      # - 9093:9093 # Alertmanager
      # - 9094:9094 # Alertmanager clustering
      # - 9100:9100 # Prometheus Exporters (9100-9563)
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--enable-feature=promql-experimental-functions'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-remote-write-receiver' # Enables remote write endpoint for k6


  grafana_srv:
    image: grafana/grafana
    container_name: "grafana_srv"
    hostname: "grafana_srv"
    # restart: always
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor metricsSummary
    depends_on:
      - prometheus_srv
    networks:
      - net
    ports:
      - 3000:3000
    volumes:
      - ./monitoring/grafana/datasources/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./monitoring/grafana/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/grafana/dashboards/social.json:/etc/grafana/provisioning/dashboards/social.json
      - ./monitoring/grafana/dashboards/k6_prometheus_19665.json:/etc/grafana/provisioning/dashboards/k6_prometheus_19665.json
      - grafana-storage:/var/lib/grafana


  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: "postgres_exporter"
    hostname: "postgres_exporter"
    # restart: always
    environment:
      - DATA_SOURCE_URI=postgres_db:5432/postgres?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=${ENV_POSTGRES_PASSWORD}
    depends_on:
      prometheus_srv:
        condition: service_started
      postgres_db:
        condition: service_healthy
    networks:
      - net
    ports:
      - 9187:9187


  k6:
    image: grafana/k6
    container_name: "k6"
    hostname: "k6"
    # restart: always
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus_srv:9090/api/v1/write
      - K6_PROMETHEUS_RW_TREND_STATS=p(95),p(99),min,max,count,sum
      - TEST_HOST=http://social_srv:6000
    depends_on:
      - prometheus_srv
      - social_srv
    networks:
      - net
    volumes:
      - ./k6_tests:/tests
    # command: run --verbose --out experimental-prometheus-rw /tests/user_search.js
